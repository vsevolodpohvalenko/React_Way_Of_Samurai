{"version":3,"sources":["HOC/WithAuthRedirect.jsx","components/Dialogs/Dialogs.module.css","components/Dialogs/Dialog/Dialog.module.css","components/Dialogs/Message/Message.jsx","components/Dialogs/Dialog/Dialog.jsx","components/Dialogs/Dialogs.jsx","components/Dialogs/put/DialogsContainer.jsx"],"names":["MapStateToProps","state","isAuth","auth","WithAuthRedirect","Component","RedirectComponent","this","props","to","React","connect","module","exports","Message","className","s","dialog","message","item","messagea","Dialog","path","id","active","src","ava","alt","lol","name","maxLengthCreator10","maxLengthCreator","AddMessageReduxForm","reduxForm","form","onSubmit","handleSubmit","action","Field","type","component","TextArea","validate","required","placeholder","Dialogs","store","getState","dialogs","messagesElements","messages","map","m","dispatch","key","dialogsElements","d","Ava","createRef","cent","item1","values","AddTextCreator","compose","newMessageChange","updateNewMessage","NewMessage","updateNewMessageTextCreator","NewMessageBody"],"mappings":"yNAIIA,G,MAAkB,SAACC,GACvB,MAAO,CAACC,OAAQD,EAAME,KAAKD,UAEdE,EAAmB,SAACC,GAAe,IACtCC,EADqC,iLAGnC,OAAKC,KAAKC,MAAMN,OAIT,kBAACG,EAAcE,KAAKC,OAFhB,kBAAC,IAAD,CAAUC,GAAI,cALU,GACXC,IAAML,WAUtC,OADuCM,YAAQX,EAARW,CAAyBL,K,oBChBpEM,EAAOC,QAAU,CAAC,QAAU,yBAAyB,aAAe,8BAA8B,KAAO,sBAAsB,KAAO,sBAAsB,OAAS,wBAAwB,OAAS,wBAAwB,IAAM,qBAAqB,SAAW,0BAA0B,MAAQ,yB,oBCAtSD,EAAOC,QAAU,CAAC,QAAU,wBAAwB,aAAe,6BAA6B,KAAO,qBAAqB,OAAS,uBAAuB,OAAS,uBAAuB,IAAM,oBAAoB,SAAW,yBAAyB,KAAO,uB,+FCOlPC,EANA,SAACN,GACZ,OAAO,6BAAK,yBAAKO,UAAWC,IAAEC,QAAST,EAAMU,SACjD,yBAAKH,UAAWC,IAAEG,MAAOX,EAAMY,Y,0BCUhBC,EAXA,SAACb,GACZ,IAAIc,EAAM,YAAcd,EAAMe,GAC9B,OAAO,yBAAKR,UAAWC,IAAEC,OAAS,IAAKD,IAAEQ,QAErC,yBAAKT,UAAWC,IAAEG,MAAM,6BAAK,yBAAKM,IAAKjB,EAAMkB,IAAKC,IAAI,MACtD,6BAAK,2BAAG,kBAAC,IAAD,CAASZ,UAAWC,IAAEY,IAAKnB,GAAIa,GACvCd,EAAMqB,OADN,a,yCCIHC,EAAoBC,YAAiB,IAQpCC,EAAsBC,YAAU,CACpCC,KAAM,wBADoBD,EAPL,SAACzB,GACtB,OAAO,0BAAM2B,SAAY3B,EAAM4B,aAAcC,OAAO,IAClD,6BAAK,kBAACC,EAAA,EAAD,CAAOC,KAAM,OAAQV,KAAQ,UAAWW,UAAYC,IAAUC,SAAU,CAACC,IAAUb,GAAqBc,YAAa,uBAC1H,4CAwCWC,EAzBC,SAACrC,GAChB,IAAIP,EAAQ6C,IAAMC,WAAWC,QAC1BC,EAAmBhD,EAAMiD,SAASC,KAAK,SAAAC,GAAC,OAAI,kBAAC,EAAD,CAASC,SAAU7C,EAAM6C,SAAUnC,QAASkC,EAAElC,QAAUE,SAAUgC,EAAEhC,SAAUkC,IAAKF,EAAE7B,QACjIgC,EAAiBtD,EAAMgB,OAAOkC,KAAK,SAAAK,GAAC,OAAI,kBAAC,EAAD,CAAQ3B,KAAM2B,EAAE3B,KAAMN,GAAIiC,EAAEjC,GAAIG,IAAK8B,EAAEC,IAAMH,IAAKE,EAAEjC,QAMtFb,IAAMgD,YAIZ,OAAM,yBAAK3C,UAAWC,IAAEgC,SAChB,yBAAKjC,UAAWC,IAAEC,QACbsC,GAET,yBAAKxC,UAAWC,IAAEkC,UACd,yBAAKnC,UAAWC,IAAE2C,MACbV,GAEb,yBAAKlC,UAAWC,IAAE4C,OAAO,kBAAC5B,EAAD,CAAqBG,SAhB9B,SAAC0B,GACnBrD,EAAMsD,eAAeD,EAAO3C,YAe1B,Q,gBCEW6C,sBAAQpD,aAvBF,SAACV,GACpB,MAAO,CACLiD,SAAUjD,EAAM+C,QAAQE,SACxBjC,OAAQhB,EAAM+C,QAAQ/B,OACtB+C,iBAAkB/D,EAAM+C,QAAQgB,iBAChC9D,OAAQD,EAAME,KAAKD,WAKC,SAACmD,GACvB,MAAM,CACNY,iBAAkB,SAACC,GACjBb,EAASc,YAA4BD,KAErCJ,eAAgB,SAACM,GACff,EAASS,YAAeM,IACxBf,EAASc,YAA4B,WAM0B/D,IAAtD2D,CAAwElB","file":"static/js/4.c6a4c44c.chunk.js","sourcesContent":["import React, {Component} from 'react'\r\nimport {Redirect, Route} from 'react-router-dom'\r\nimport { connect } from 'react-redux'\r\nimport Preloader from \"../components/preloader/Preloader\";\r\nlet MapStateToProps = (state) =>{\r\nreturn {isAuth: state.auth.isAuth}\r\n}\r\nexport const WithAuthRedirect = (Component) => {\r\n    class RedirectComponent extends React.Component {\r\n        render () {debugger\r\n            if (!this.props.isAuth) {\r\n                \r\n                return <Redirect to= 'Login' />\r\n            } \r\n            return <Component {...this.props}/>\r\n        }\r\n    }\r\n    let ConnectWithAuthRedirectComponent = connect(MapStateToProps)(RedirectComponent)\r\n    return ConnectWithAuthRedirectComponent\r\n}\r\n","// extracted by mini-css-extract-plugin\nmodule.exports = {\"dialogs\":\"Dialogs_dialogs__1Ag37\",\"dialogsItems\":\"Dialogs_dialogsItems__12ey7\",\"cent\":\"Dialogs_cent__2Cu3h\",\"item\":\"Dialogs_item__1x8JP\",\"active\":\"Dialogs_active__Mk_F3\",\"dialog\":\"Dialogs_dialog__2S49m\",\"lol\":\"Dialogs_lol__3CQ7a\",\"messages\":\"Dialogs_messages__35ugR\",\"item1\":\"Dialogs_item1__2yVgQ\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"dialogs\":\"Dialog_dialogs__3qRfL\",\"dialogsItems\":\"Dialog_dialogsItems__2a0lA\",\"cent\":\"Dialog_cent__LQ7yU\",\"active\":\"Dialog_active__PzIfr\",\"dialog\":\"Dialog_dialog__2cPiH\",\"lol\":\"Dialog_lol__1-ua5\",\"messages\":\"Dialog_messages__DFvZi\",\"item\":\"Dialog_item__2m3FT\"};","import React, {} from 'react';\r\nimport s from './../Dialogs.module.css'\r\nconst Message =(props) =>{\r\n    return <div><div className={s.dialog}>{props.message}</div>\r\n<div className={s.item}>{props.messagea}</div>\r\n    </div>\r\n}\r\n\r\nexport default Message;","import React, {} from 'react';\r\nimport s from './Dialog.module.css'\r\nimport { NavLink } from 'react-router-dom';\r\nconst Dialog = (props) =>{\r\n    let path =\"/dialogs/\" + props.id\r\n    return(<div className={s.dialog + ' '+ s.active}>\r\n        \r\n        <div className={s.item}><div><img src={props.ava} alt=\"\"/></div>\r\n        <div><p><NavLink className={s.lol} to={path}>{\r\n        props.name}</NavLink></p>      </div>\r\n        </div> \r\n        </div>\r\n    )\r\n}\r\nexport default Dialog;","import React, {} from 'react';\r\nimport s from './Dialogs.module.css'\r\nimport Message from './Message/Message';\r\nimport Dialog from './Dialog/Dialog';\r\nimport store from '../../redux/redux_store';\r\nimport { Field, reduxForm } from 'redux-form';\r\nimport { TextArea } from '../preloader/FormControls';\r\nimport { required, maxLengthCreator } from '../../utils/validators';\r\n\r\n\r\n\r\n\r\nlet  maxLengthCreator10= maxLengthCreator(10)\r\nconst AddMessageForm = (props) => {\r\n  return <form onSubmit = {props.handleSubmit} action=\"\">\r\n    <div><Field type= \"text\"  name = {\"message\"} component ={TextArea} validate={[required, maxLengthCreator10]} placeholder={\"Text something...\"}/></div>\r\n    <button >Send</button>\r\n  </form>\r\n}\r\n\r\nconst AddMessageReduxForm = reduxForm({\r\n  form: \"dialogAddMessageForm\"\r\n})(AddMessageForm)\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\nconst Dialogs = (props) => {\r\n let state = store.getState().dialogs   \r\nlet messagesElements = state.messages.map( m => <Message dispatch={props.dispatch} message={m.message}  messagea={m.messagea} key={m.id}/>);\r\nlet dialogsElements =state.dialog.map( d => <Dialog name={d.name} id={d.id} ava={d.Ava}  key={d.id}/>);\r\n\r\nlet AddNewMessage = (values) =>{\r\n  props.AddTextCreator(values.message)\r\n}\r\n\r\nlet Text= React.createRef()\r\n\r\n\r\n\r\n    return<div className={s.dialogs}>\r\n            <div className={s.dialog}>\r\n                {dialogsElements}\r\n         </div>\r\n        <div className={s.messages}>\r\n            <div className={s.cent}>\r\n                {messagesElements}\r\n            </div>\r\n    <div className={s.item1}><AddMessageReduxForm onSubmit ={AddNewMessage}/> </div>\r\n  </div>\r\n        </div>\r\n        }\r\nexport default Dialogs;","import React, {Component } from 'react';\r\nimport { updateNewMessageTextCreator, AddTextCreator } from '../../../redux/dialogs_reducer';\r\nimport { connect } from 'react-redux';\r\nimport Dialogs, { MessageForm } from '../Dialogs';\r\nimport { WithAuthRedirect } from '../../../HOC/WithAuthRedirect';\r\nimport { compose } from 'redux';\r\n// const TextrContainer = (props) => {\r\n\r\n\r\n//   return <StoreContext.Consumer>\r\n//     { \r\n//     (store) => {\r\n//       let state = store.getState()\r\n//     let ChangeText =(NewMessage) =>{\r\n \r\n//       store.dispatch(updateNewMessageTextCreator(NewMessage))\r\n//     }\r\n    \r\n//     let addtext=( )=>{\r\n//       store.dispatch(AddTextCreator())\r\n//       store.dispatch(updateNewMessageTextCreator(' '))}\r\n\r\n   \r\n//    return  <Textr newMessageChange={state.dialogs.newMessageChange} updateNewMessage={ChangeText} AddTextCreator={addtext} />\r\n//     }\r\n//     }\r\n//     </StoreContext.Consumer>\r\n\r\n// }\r\n\r\n\r\nlet mapStateToProps= (state) => {\r\n  return {\r\n    messages: state.dialogs.messages,\r\n    dialog: state.dialogs.dialog,\r\n    newMessageChange: state.dialogs.newMessageChange, \r\n    isAuth: state.auth.isAuth\r\n    \r\n  }\r\n}\r\n\r\nlet mapDispatchToProps= (dispatch) => {\r\n  return{\r\n  updateNewMessage: (NewMessage) => {\r\n    dispatch(updateNewMessageTextCreator(NewMessage))\r\n    },\r\n    AddTextCreator: (NewMessageBody) => {\r\n      dispatch(AddTextCreator(NewMessageBody))\r\n      dispatch(updateNewMessageTextCreator(' '))\r\n    }\r\n  }\r\n    }\r\n\r\n\r\nexport default compose(connect(mapStateToProps, mapDispatchToProps), WithAuthRedirect)(Dialogs)"],"sourceRoot":""}